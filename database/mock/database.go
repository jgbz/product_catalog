// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jgbz/product_catalog/database (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination mock/database.go github.com/jgbz/product_catalog/database Repository
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	domain "github.com/jgbz/product_catalog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateCampaign mocks base method.
func (m *MockRepository) CreateCampaign(name string) (*domain.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", name)
	ret0, _ := ret[0].(*domain.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockRepositoryMockRecorder) CreateCampaign(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockRepository)(nil).CreateCampaign), name)
}

// GetCampaignsContent mocks base method.
func (m *MockRepository) GetCampaignsContent(limit, offset int) ([]*domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaignsContent", limit, offset)
	ret0, _ := ret[0].([]*domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaignsContent indicates an expected call of GetCampaignsContent.
func (mr *MockRepositoryMockRecorder) GetCampaignsContent(limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaignsContent", reflect.TypeOf((*MockRepository)(nil).GetCampaignsContent), limit, offset)
}

// GetRecommendedContentByClient mocks base method.
func (m *MockRepository) GetRecommendedContentByClient(clientID string, limit, offset int) ([]*domain.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecommendedContentByClient", clientID, limit, offset)
	ret0, _ := ret[0].([]*domain.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecommendedContentByClient indicates an expected call of GetRecommendedContentByClient.
func (mr *MockRepositoryMockRecorder) GetRecommendedContentByClient(clientID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecommendedContentByClient", reflect.TypeOf((*MockRepository)(nil).GetRecommendedContentByClient), clientID, limit, offset)
}

// Health mocks base method.
func (m *MockRepository) Health() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockRepositoryMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockRepository)(nil).Health))
}
